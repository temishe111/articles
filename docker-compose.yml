version: '3.8'

services:
  app:
    build: .docker/php
    container_name: php-${APP_NAME}
    volumes:
      - ./:/${APP_DIRECTORY}
    working_dir: /${APP_DIRECTORY}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - net

  web:
    image: nginx:alpine
    container_name: nginx-${APP_NAME}
    depends_on:
      - app
    ports:
      - ${APP_PORT}:80
    volumes:
      - ./:/${APP_DIRECTORY}
      - ./.docker/nginx/conf.d:/etc/nginx/conf.d
    networks:
      - net

  pg:
    image: postgres:16
    container_name: psql-${APP_NAME}
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGPORT: ${PGPORT}
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - ${POSTGRES_EXT_PORT}:${PGPORT}
    networks:
      - net

  composer:
    image: composer:latest
    container_name: composer-${APP_NAME}
    volumes:
      - ./:/${APP_DIRECTORY}
    working_dir: /${APP_DIRECTORY}
    entrypoint: [ "/bin/sh", "-c" ]
    command: [ "composer install" ]
    networks:
      - net
    depends_on:
      - app

###> doctrine/doctrine-bundle ###
  database:
    image: postgres:${POSTGRES_VERSION:-16}-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app}
      # You should definitely change the password in production
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-!ChangeMe!}
      POSTGRES_USER: ${POSTGRES_USER:-app}
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "${POSTGRES_DB:-app}", "-U", "${POSTGRES_USER:-app}"]
      timeout: 5s
      retries: 5
      start_period: 60s
    volumes:
      - database_data:/var/lib/postgresql/data:rw
      # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
      # - ./docker/db/data:/var/lib/postgresql/data:rw
###< doctrine/doctrine-bundle ###

volumes:
  pgdata:

###> doctrine/doctrine-bundle ###
  database_data:
###< doctrine/doctrine-bundle ###
  pgdata-test:

networks:
  net:
    driver: bridge
